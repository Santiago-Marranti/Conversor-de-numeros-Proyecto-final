📄 README.md - VERSIÓN 2.0
markdown
# 🔢 Conversor de Números Romanos v2.0

![JavaScript](https://img.shields.io/badge/JavaScript-ES6+-yellow)
![Jest](https://img.shields.io/badge/Testing-Jest-green)
![HTML5](https://img.shields.io/badge/HTML5-E34F26?logo=html5&logoColor=white)
![CSS3](https://img.shields.io/badge/CSS3-1572B6?logo=css3&logoColor=white)
![Vercel](https://img.shields.io/badge/Deploy-Vercel-black)

## 👨‍💻 Desarrollado por: **Roman Acuña**

**Conversor bidireccional avanzado** con soporte extendido para números romanos hasta 9,999. Proyecto completo con tests automatizados y despliegue profesional.

## 🚀 Novedades v2.0

### ✨ Características Principales
- **✅ Rango extendido**: Soporte para números del **1 al 9,999** (antes 3,999)
- **✅ Notación moderna**: Uso de paréntesis para números grandes: `(IV)=4000`, `(V)=5000`, `(IX)=9000`
- **✅ Conversión bidireccional**: Funciona perfectamente en ambas direcciones
- **✅ 19 tests automatizados**: Suite completa de pruebas
- **✅ Interfaz mejorada**: Diseño responsive y experiencia de usuario optimizada

## 🎯 Demo en Vivo

🌐 **URL oficial**: [https://conversor-de-numeros-proyecto-final.vercel.app](https://conversor-de-numeros-proyecto-final.vercel.app)

## 📸 Vista Previa

![Conversor Romano v2.0](https://via.placeholder.com/800x400/667eea/ffffff?text=Conversor+Romano+v2.0+by+Roman+Acuña)

## 🛠️ Stack Tecnológico

### Frontend
- **HTML5** - Estructura semántica
- **CSS3** - Diseño responsive con Grid y Flexbox
- **JavaScript ES6+** - Lógica modular y eficiente

### Desarrollo & Testing
- **Jest** - Framework de testing
- **Jest DOM** - Testing de entorno navegador
- **Live Server** - Servidor de desarrollo

### Deployment
- **Vercel** - Plataforma de despliegue
- **GitHub** - Control de versiones

## 📁 Arquitectura del Proyecto
Conversor-de-numeros-Proyecto-final/
├── 📄 index.html # Página principal
├── 🎨 style.css # Estilos y diseño responsive
├── ⚙️ script.js # Lógica principal del conversor
├── 🧪 script.test.js # Suite de tests (19 pruebas)
├── 📦 package.json # Configuración y dependencias
├── 🚀 vercel.json # Configuración de despliegue
└── 📖 README.md # Documentación

text

## 🔧 Características Técnicas

### Sistema de Numeración Extendido
```javascript
// Mapa de valores implementado por Roman Acuña
const romanMap = [
    { symbol: '(X)', value: 10000 },  // 10,000
    { symbol: '(IX)', value: 9000 },   // 9,000
    { symbol: '(V)', value: 5000 },    // 5,000
    { symbol: '(IV)', value: 4000 },   // 4,000
    { symbol: 'M', value: 1000 },
    // ... símbolos tradicionales
];
Validación Avanzada
✅ Validación de caracteres romanos

✅ Verificación de rango (1-9,999)

✅ Soporte para minúsculas/automayúsculas

✅ Manejo de espacios en blanco

🧪 Sistema de Testing
Suite de Pruebas Completas
bash
# Ejecutar todos los tests
npm test

# Resultado: 19 tests pasados ✅
Cobertura de Tests
✅ Conversión básica (I→1, V→5, X→10)

✅ Notación sustractiva (IV→4, IX→9, CM→900)

✅ Números complejos (MMXXIV→2024, MMMCMXCIX→3999)

✅ Números extendidos ((IV)→4000, (V)→5000, (IX)→9000)

✅ Validación y manejo de errores

✅ Conversión bidireccional

🚀 Instalación y Desarrollo
Prerrequisitos
Node.js (v14 o superior)

npm o yarn

Configuración Local
bash
# Clonar el proyecto
git clone https://github.com/Romannacuuu/Conversor-de-numeros-Proyecto-final.git

# Instalar dependencias
npm install

# Ejecutar en desarrollo
npm run dev

# Ejecutar tests
npm test
📖 Guía de Uso
Conversión Número → Romano
Ingresa un número entre 1 y 9,999

Haz clic en "Convertir" o presiona Enter

Recibe el resultado en notación romana

Conversión Romano → Número
Ingresa números romanos válidos

Usa paréntesis para números grandes: (IV), (V), (IX)

Haz clic en "Convertir" o presiona Enter

Recibe el resultado en formato decimal

Ejemplos de Conversión
Decimal	Romano	Notación
2024	MMXXIV	Tradicional
4000	(IV)	Extendida
5000	(V)	Extendida
5555	(V)DLV	Mixta
9000	(IX)	Extendida
9999	(IX)CMXCIX	Mixta
🔄 Comandos Disponibles
bash
# Desarrollo
npm run dev          # Servidor de desarrollo
npm start           # Servidor de producción

# Testing
npm test            # Ejecutar suite de tests
npm run test:watch  # Tests en modo watch

# Deployment
vercel --prod       # Despliegue en Vercel
🚀 Despliegue
Despliegue Automático
El proyecto está configurado para despliegue automático en Vercel. Cada push a la rama main activa un nuevo deploy.

Despliegue Manual
bash
# Instalar Vercel CLI
npm install -g vercel

# Desplegar
vercel --prod
🎯 Roadmap v2.0
✅ Implementado
Soporte para números hasta 9,999

Notación con paréntesis

Tests actualizados

Interfaz v2.0

Despliegue automático

👨‍💻 Autor
Roman Acuña - Desarrollo completo fullstack

GitHub: @Romannacuuu

Proyecto: Conversor Romano v2.0

npm run dev // se corre en el navegador

 https://conversor-de-numeros-proyecto-final-5r0vvan6w.vercel.app

 https://vercel.com/roman-acunas-projects/conversor-de-numeros-proyecto-final/F4gRoy7HJbjP6DZfQxNVysbT3Xa2

LINK VERCEL